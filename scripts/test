#!/bin/bash -exu

consul_release_version="99999+dev.${RANDOM}"
warden_cpi_version="28"
turbulence_version="0.4"

function check_dependencies() {
  test -n "${CONSATS_CONFIG?"CONSATS_CONFIG is a required environment variable"}"

  if [[ -z "$(which jq)" ]]; then
    echo "This test runner requires 'jq'"
    exit 1
  fi
}

function main() {
  parse_config

  local scripts_dir
  scripts_dir=$(cd "$(dirname "${0}")" && pwd)

  upload_releases "${scripts_dir}"
  bash -c "${scripts_dir}/../src/acceptance-tests/scripts/test $@"
}

function parse_config() {
  set +x
  export BOSH_DIRECTOR="$(jq --raw-output '.bosh.target' "${CONSATS_CONFIG}")"
  export BOSH_USER="$(jq --raw-output '.bosh.username' "${CONSATS_CONFIG}")"
  export BOSH_PASSWORD="$(jq --raw-output '.bosh.password' "${CONSATS_CONFIG}")"
  set -x
}

function upload_releases() {
  local scripts_dir
  scripts_dir="${1}"

  pushd "${scripts_dir}/.." > /dev/null
    bosh -t "${BOSH_DIRECTOR}" create release --force --version "${consul_release_version}"
    bosh -t "${BOSH_DIRECTOR}" upload release
  popd > /dev/null

  local releases_dir
  releases_dir="/tmp/consats/releases"
  mkdir -p "${releases_dir}"

  if [[ ! -e "${releases_dir}/bosh-warden-cpi-release.tgz" ]]; then
    wget -O "${releases_dir}/bosh-warden-cpi-release.tgz" "http://bosh.io/d/github.com/cppforlife/bosh-warden-cpi-release?v=${warden_cpi_version}"
  fi
  bosh -t ${BOSH_DIRECTOR} upload release "${releases_dir}/bosh-warden-cpi-release.tgz" --skip-if-exists

  if [[ ! -e "${releases_dir}/turbulence-release.tgz" ]]; then
    wget -O "${releases_dir}/turbulence-release.tgz" "http://bosh.io/d/github.com/cppforlife/turbulence-release?v=${turbulence_version}"
  fi
  bosh -t "${BOSH_DIRECTOR}" upload release "${releases_dir}/turbulence-release.tgz" --skip-if-exists
}

function cleanup_releases() {
  set +e
  bosh -t "${BOSH_DIRECTOR}" -n delete release turbulence "${turbulence_version}"
  bosh -t "${BOSH_DIRECTOR}" -n delete release bosh-warden-cpi "${warden_cpi_version}"
  bosh -t "${BOSH_DIRECTOR}" -n delete release consul "${consul_release_version}"
  set -e
}

check_dependencies
trap cleanup_releases EXIT
main "$@"
