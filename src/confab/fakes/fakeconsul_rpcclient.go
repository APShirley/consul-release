// This file was generated by counterfeiter
package fakes

import (
	"confab"
	"sync"
)

type FakeconsulRPCClient struct {
	StatsStub        func() (map[string]map[string]string, error)
	statsMutex       sync.RWMutex
	statsArgsForCall []struct{}
	statsReturns     struct {
		result1 map[string]map[string]string
		result2 error
	}
	InstallKeyStub        func(key, token string) (confab.KeyringResponse, error)
	installKeyMutex       sync.RWMutex
	installKeyArgsForCall []struct {
		key   string
		token string
	}
	installKeyReturns struct {
		result1 confab.KeyringResponse
		result2 error
	}
}

func (fake *FakeconsulRPCClient) Stats() (map[string]map[string]string, error) {
	fake.statsMutex.Lock()
	fake.statsArgsForCall = append(fake.statsArgsForCall, struct{}{})
	fake.statsMutex.Unlock()
	if fake.StatsStub != nil {
		return fake.StatsStub()
	} else {
		return fake.statsReturns.result1, fake.statsReturns.result2
	}
}

func (fake *FakeconsulRPCClient) StatsCallCount() int {
	fake.statsMutex.RLock()
	defer fake.statsMutex.RUnlock()
	return len(fake.statsArgsForCall)
}

func (fake *FakeconsulRPCClient) StatsReturns(result1 map[string]map[string]string, result2 error) {
	fake.StatsStub = nil
	fake.statsReturns = struct {
		result1 map[string]map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeconsulRPCClient) InstallKey(key string, token string) (confab.KeyringResponse, error) {
	fake.installKeyMutex.Lock()
	fake.installKeyArgsForCall = append(fake.installKeyArgsForCall, struct {
		key   string
		token string
	}{key, token})
	fake.installKeyMutex.Unlock()
	if fake.InstallKeyStub != nil {
		return fake.InstallKeyStub(key, token)
	} else {
		return fake.installKeyReturns.result1, fake.installKeyReturns.result2
	}
}

func (fake *FakeconsulRPCClient) InstallKeyCallCount() int {
	fake.installKeyMutex.RLock()
	defer fake.installKeyMutex.RUnlock()
	return len(fake.installKeyArgsForCall)
}

func (fake *FakeconsulRPCClient) InstallKeyArgsForCall(i int) (string, string) {
	fake.installKeyMutex.RLock()
	defer fake.installKeyMutex.RUnlock()
	return fake.installKeyArgsForCall[i].key, fake.installKeyArgsForCall[i].token
}

func (fake *FakeconsulRPCClient) InstallKeyReturns(result1 confab.KeyringResponse, result2 error) {
	fake.InstallKeyStub = nil
	fake.installKeyReturns = struct {
		result1 confab.KeyringResponse
		result2 error
	}{result1, result2}
}

// var _ confab.consulRPCClient = new(FakeconsulRPCClient)
